// PWA Utilities –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–µ—à–µ–º –∏ –æ—Ñ–ª–∞–π–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é

export interface CacheInfo {
  name: string;
  size: number;
  entries: number;
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–µ—à–∞—Ö
 */
export async function getCacheInfo(): Promise<CacheInfo[]> {
  if (!('caches' in window)) {
    return [];
  }

  const cacheNames = await caches.keys();
  const cacheInfo: CacheInfo[] = [];

  for (const cacheName of cacheNames) {
    const cache = await caches.open(cacheName);
    const keys = await cache.keys();
    let totalSize = 0;

    for (const request of keys) {
      const response = await cache.match(request);
      if (response) {
        const blob = await response.blob();
        totalSize += blob.size;
      }
    }

    cacheInfo.push({
      name: cacheName,
      size: totalSize,
      entries: keys.length
    });
  }

  return cacheInfo;
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∫–µ—à–∏
 */
export async function clearAllCaches(): Promise<void> {
  if (!('caches' in window)) {
    return;
  }

  const cacheNames = await caches.keys();
  await Promise.all(cacheNames.map(cacheName => caches.delete(cacheName)));
}

/**
 * –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–µ—à
 */
export async function clearCache(cacheName: string): Promise<void> {
  if (!('caches' in window)) {
    return;
  }

  await caches.delete(cacheName);
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
 */
export function isOffline(): boolean {
  return !navigator.onLine;
}

/**
 * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function onConnectionChange(callback: (isOnline: boolean) => void): () => void {
  const handleOnline = () => callback(true);
  const handleOffline = () => callback(false);

  window.addEventListener('online', handleOnline);
  window.addEventListener('offline', handleOffline);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
  return () => {
    window.removeEventListener('online', handleOnline);
    window.removeEventListener('offline', handleOffline);
  };
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 */
export function showConnectionStatus(): void {
  const status = isOffline() ? 'üî¥ –û—Ñ–ª–∞–π–Ω' : 'üü¢ –û–Ω–ª–∞–π–Ω';
  console.log(`–°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${status}`);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫–µ—à–∞ –≤ —á–∏—Ç–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export function formatCacheSize(bytes: number): string {
  const units = ['B', 'KB', 'MB', 'GB'];
  let size = bytes;
  let unitIndex = 0;

  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }

  return `${size.toFixed(2)} ${units[unitIndex]}`;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –±—Ä–∞—É–∑–µ—Ä PWA —Ñ—É–Ω–∫—Ü–∏–∏
 */
export function checkPWASupport(): {
  serviceWorker: boolean;
  pushManager: boolean;
  notifications: boolean;
  cache: boolean;
} {
  return {
    serviceWorker: 'serviceWorker' in navigator,
    pushManager: 'PushManager' in window,
    notifications: 'Notification' in window,
    cache: 'caches' in window
  };
}

/**
 * –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
export async function requestNotificationPermission(): Promise<NotificationPermission> {
  if (!('Notification' in window)) {
    throw new Error('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
  }

  if (Notification.permission === 'default') {
    return await Notification.requestPermission();
  }

  return Notification.permission;
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
 */
export function showNotification(title: string, options?: NotificationOptions): void {
  if (Notification.permission === 'granted') {
    new Notification(title, options);
  } else {
    console.warn('–ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
  }
}
